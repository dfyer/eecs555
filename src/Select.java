/* Generated By:JavaCC: Do not edit this line. Select.java */
    import java.io.*;

    public class Select implements SelectConstants {
        public static void main(String[] args)
            throws ParseException, TokenMgrError {
                        System.out.println("SDBS v1.2");
                        Select parser = new Select(System.in);

                        // Some initial statements to help debugging
                        System.out.println("Initializing databases.. ");
                        DBMS dbms = new DBMS();
                        try {
                                BufferedReader br = new BufferedReader(new FileReader("init.sql"));
                                String line = null;
                                while((line = br.readLine()) != null) {
                                        System.out.println(line);
                                        parser.ReInit(new ByteArrayInputStream(line.getBytes("UTF-8")));
                                        dbms.executeStatement(parser.Start());
                                }
                                br.close();
                        }
                        catch (IOException e) {
                                e.printStackTrace();
                        }

                        // Shell(?) starts from here
                        parser.ReInit(System.in);
                        while(true){
                                Statement stmt = parser.Start();
                                if(stmt != null)
                                        dbms.executeStatement(stmt);
                                else
                                        break; // Exit
                        }
        }

/* Specifying the parser using BNF productions */
/* The input to the parser consists of a single statement so far:
 *     Start --> Statement
 */
  static final public Statement Start() throws ParseException {
    Statement stmt;
        stmt = ParseStatement();
        /*printStream.println("select: " + stmt.select);
        printStream.println("from: " + stmt.from); 
        printStream.println("where: " + stmt.where);*/
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

/* A Statement so far is defined as follows:
 *
 *    Statement --> select *
 *               |  Select *
 *               |  SELECT *
 */
  static final public Statement ParseStatement() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATABASE:
        jj_consume_token(DATABASE);
          CreateDatabaseStatement cds = new CreateDatabaseStatement();
        t = jj_consume_token(ATTR);
            cds.dbname = t.image;
        jj_consume_token(ENDOFSTATEMENT);
          {if (true) return cds;}
        break;
      case TABLE:
        jj_consume_token(TABLE);
          CreateTableStatement cts = new CreateTableStatement();
        t = jj_consume_token(ATTR);
          cts.tableName = t.image;
        jj_consume_token(OBRA);
        t = jj_consume_token(ATTR);
            String name = t.image;
        t = jj_consume_token(ATTR);
            String type = t.image; cts.add(name, type);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(ATTR);
            name = t.image;
          t = jj_consume_token(ATTR);
            type = t.image; cts.add(name, type);
        }
        jj_consume_token(CBRA);
        jj_consume_token(ENDOFSTATEMENT);
          {if (true) return cts;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case INSERT:
      jj_consume_token(INSERT);
        InsertStatement is = new InsertStatement();
      jj_consume_token(INTO);
      t = jj_consume_token(ATTR);
        is.tableName = t.image;
      jj_consume_token(VALUES);
      jj_consume_token(OBRA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE:
        t = jj_consume_token(VALUE);
          is.add(t.image);
        break;
      case ATTR:
        t = jj_consume_token(ATTR);
          is.add(t.image);
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
          is.add(t.image);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUE:
          t = jj_consume_token(VALUE);
            is.add(t.image);
          break;
        case ATTR:
          t = jj_consume_token(ATTR);
            is.add(t.image);
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
            is.add(t.image);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CBRA);
      jj_consume_token(ENDOFSTATEMENT);
        {if (true) return is;}
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
        UpdateStatement ups = new UpdateStatement();
      t = jj_consume_token(ATTR);
            ups.tableName = t.image;
      jj_consume_token(SET);
      t = jj_consume_token(ATTR);
            ups.attr = t.image;
      jj_consume_token(CONDOPERATOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE:
        t = jj_consume_token(VALUE);
          ups.val = t.image;
        break;
      case ATTR:
        t = jj_consume_token(ATTR);
          ups.val = t.image;
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
          ups.val = t.image;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        t = jj_consume_token(ATTR);
                  String left = t.image;
        t = jj_consume_token(CONDOPERATOR);
                  String operator = t.image;
                  String right = "";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUE:
          t = jj_consume_token(VALUE);
                    right += t.image;
                    ups.where = new ConditionExpression(left, operator, right);
          break;
        case ATTR:
          t = jj_consume_token(ATTR);
                    right += t.image;
                    ups.where = new ConditionExpression(left, operator, right);
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
                    right += t.image;
                    ups.where = new ConditionExpression(left, operator, right);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(ENDOFSTATEMENT);
            {if (true) return ups;}
      break;
    case USE:
      jj_consume_token(USE);
        UseStatement us = new UseStatement();
      t = jj_consume_token(ATTR);
        us.dbname = t.image;
      jj_consume_token(ENDOFSTATEMENT);
        {if (true) return us;}
      break;
    case SHOW:
      jj_consume_token(SHOW);
      jj_consume_token(DATABASES);
        Statement showdbs = new Statement("SHOW DATABASES");
      jj_consume_token(ENDOFSTATEMENT);
        {if (true) return showdbs;}
      break;
    case SELECT:
      jj_consume_token(SELECT);
        SelectStatement ss = new SelectStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
          ss.addAttribute(t.image);
        break;
      case ATTR:
        t = jj_consume_token(ATTR);
            ss.addAttribute(t.image);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(ATTR);
            ss.addAttribute(t.image);
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FROM);
      t = jj_consume_token(ATTR);
          ss.addRelation(t.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ATTR);
          ss.addRelation(t.image);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        t = jj_consume_token(ATTR);
                    String left =  t.image;
        t = jj_consume_token(CONDOPERATOR);
                    String operator = t.image;
                    String right = "";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUE:
          t = jj_consume_token(VALUE);
                      right += t.image;
                      ss.addCondition(new ConditionExpression(left, operator, right));
          break;
        case ATTR:
          t = jj_consume_token(ATTR);
                      right += t.image;
                      ss.addCondition(new ConditionExpression(left, operator, right));
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
                      right += t.image;
                      ss.addCondition(new ConditionExpression(left, operator, right));
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_5;
          }
          jj_consume_token(AND);
          t = jj_consume_token(ATTR);
                    left =  t.image;
          t = jj_consume_token(CONDOPERATOR);
                    operator = t.image;
                    right = "";
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VALUE:
            t = jj_consume_token(VALUE);
                      right += t.image;
                      ss.addCondition(new ConditionExpression(left, operator, right));
            break;
          case ATTR:
            t = jj_consume_token(ATTR);
                      right += t.image;
                      ss.addCondition(new ConditionExpression(left, operator, right));
            break;
          case NUMBER:
            t = jj_consume_token(NUMBER);
                      right += t.image;
                      ss.addCondition(new ConditionExpression(left, operator, right));
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(ENDOFSTATEMENT);
        {if (true) return ss;}
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(ENDOFSTATEMENT);
        {if (true) return null;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SelectTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x30000,0x80000000,0x800,0x80000000,0x80000000,0x80000000,0x4000,0x800,0x80000040,0x800,0x80000000,0x8000000,0x80000000,0x4000,0x52c9000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x3,0x0,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Select(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Select(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SelectTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Select(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SelectTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Select(SelectTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SelectTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
